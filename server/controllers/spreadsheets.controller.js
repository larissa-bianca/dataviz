const { google } = require("googleapis");
const ChartjsNode = require("chartjs-node");
const logger = require("../../config/logger");
const { client, authorizeUrl } = require("../../config/google-auth");

const fileName = "frentePopularInstagram.png";
const pathOfFile = `${__dirname}/${fileName}`;

/**
* Contacts the Google API and generates a token. Returns the path of the
* chart generated on disk and calls the res object to send the image
* to the browser.
* @param {object} req - standard req object from the Express library
* @param {object} res - standard res object from the Express library
* @returns {String} pathOfFile - path of the chart generated on disk
* @returns {File} outputFile - Promise containing resized image or error
*/
const authenticate = (req, res, next) => {
	if (req.query.code === undefined) {
		return res.redirect(authorizeUrl);
	}
	const code = req.query.code;

	return client.getToken(code, async (err, tokens) => {
		if (err) {
			logger.error(`Error getting oAuth tokens: ${err}`);
			return res.status(500).send("Error");
		}
		client.credentials = tokens;
		req.client = client;
		return next();
	});
};

/**
 * Returns data from a given spreadsheeet in JSON format
 * @param {object} auth - auth object generated by Google authentication
 * @returns {Promise} collectivesPromise - Promise object that resolves when rows of Google
 * Spreadsheet's data are collected and fails when the API returns an error
 */
const listCollectives = (req, res, next) => {
	const auth = req.client;
	const sheets = google.sheets("v4");
	sheets.spreadsheets.values.get({
		auth: auth,
		spreadsheetId: "1W4kmkNTZrDUHyZx_siToEr9EDZvTGEwDTp05I18Ach4",
		range: "A:S",
	}, (err, res2) => {
		if (err) {
			logger.error("The API returned an error.");
			return res.status(500).send("The API returned an error.");
		}
		const rows = res2.data.values;
		if (rows.length === 0) {
			logger.error("No data found.");
			return res.status(500).send("No data found");
		} else {
			req.collectives = rows;
			return next();
		}
	});
};

/**
 * Generates a Pie chart from data collected from the Spreadsheets API.
 * This example refers to the "Movimento Frente Popular" row in the spreadsheet,
 * and plots the "Tweets","Seguindo","Seguidores" and "Curtidas" column for that
 * organization.
 * @param {object} collectives - JSON object that contains information for social movements
 * @returns {Promise} Promise object that resolves when
 * the chart's image file is written to disk data are collected and fails when
 * chartJSNode fails to do so.
 */
const generateCharts = async (req, res, next) => {
	const collectives = req.collectives;
	logger.trace("Generating graph from collectives");
	const chartNode = new ChartjsNode(600, 600);
	/* In sequence: Tweets, Seguindo, Seguidores, Curtidas */
	const data = [collectives[2][8], collectives[2][9], collectives[2][10], collectives[2][11]];
	/* INSTAGRAM */
	const label = collectives[0][16];
	const labels = [
		collectives[1][8], // Tweets
		collectives[1][9], // Seguindo
		collectives[1][10], // Seguidores
		collectives[1][11], // Curtidas
	];
	const config = {
		type: "pie",
		data: {
			datasets: [{
				data: data,
				backgroundColor: ["#3e95cd", "#8e5ea2", "#3cba9f", "#e8c3b9"],
				label: label,
			}],
			labels: labels,
		},
		options: {
			responsive: true,
		},
	};
	await chartNode.drawChart(config);
	await chartNode.writeImageToFile("image/png", pathOfFile);
	return res.sendFile(pathOfFile);
};

module.exports = { listCollectives, generateCharts, authenticate };

const { google } = require("googleapis");
const ChartjsNode = require("chartjs-node");
const instagram = require("../templates/instagram");
const logger = require("../config/logger");

const fileName = "frentePopularInstagram_Rod.png";
const pathOfFile = `${__dirname}/${fileName}`;
const chartSize = 600;
const tweetsRow = 8;
const seguindoRow = 9;
const seguidoresRow = 10;
const curtidasRow = 11;


/**
* Contacts the Google API and generates a token. Returns the path of the
* chart generated on disk and calls the res object to send the image
* to the browser.
* @param {object} client - client object for authentication with Google
* @param {object} req - standard req object from the Express library
* @param {object} res - standard res object from the Express library
* @returns {String} pathOfFile - path of the chart generated on disk
* @returns {File} outputFile - Promise containing resized image or error
*/
const authenticate = (client, req, res) => {
	if (req.query.code === undefined) {
		logger.error("Undefined auth code");
		return res.status(500).send("No code query parameter");
	}
	const code = req.query.code;

	return client.getToken(code, async (err, tokens) => {
		if (err) {
			logger.error(`Error getting oAuth tokens: ${err}`);
			return res.status(500).send("Error");
		}
		client.credentials = tokens;

		try {
			const collectives = await listCollectives(client);
			await generateCharts(collectives);
			res.sendFile(pathOfFile);
			return pathOfFile;
		} catch (e) {
			logger.error(e);
			return res.status(500).send("Error");
		}
	});
};

/**
 * Returns data from a given spreadsheeet in JSON format
 * @param {object} auth - auth object generated by Google authentication
 * @returns {Promise} collectivesPromise - Promise object that resolves when rows of Google
 * Spreadsheet's data are collected and fails when the API returns an error
 */

const listCollectives = (auth) => {
	const collectivesPromise = new Promise((resolve, reject) => {
		const sheets = google.sheets("v4");
		sheets.spreadsheets.values.get({
			auth: auth,
			spreadsheetId: "1W4kmkNTZrDUHyZx_siToEr9EDZvTGEwDTp05I18Ach4",
			range: "A:S",
		}, (err, res) => {
			if (err) {
				logger.error("The API returned an error.");
				reject(err);
			}
			const rows = res.data.values;
			if (rows.length === 0) {
				logger.error("No data found.");
				reject(rows);
			} else {
				resolve(rows);
			}
		});
	});
	return collectivesPromise;
};

/**
 * Generates a Pie chart from data collected from the Spreadsheets API.
 * This example refers to the "Movimento Frente Popular" row in the spreadsheet,
 * and plots the "Tweets","Seguindo","Seguidores" and "Curtidas" column for that
 * organization.
 * @param {object} collectives - JSON object that contains information for social movements
 * @returns {Promise} Promise object that resolves when
 * the chart's image file is written to disk data are collected and fails when
 * chartJSNode fails to do so.
 */

const generateCharts = async (collectives) => {
	logger.trace("Generating graph from collectives");
	const chartNode = new ChartjsNode(chartSize, chartSize);
	/* In sequence: Tweets, Seguindo, Seguidores, Curtidas */
	const data = [
		collectives[2][tweetsRow],
		collectives[2][seguidoresRow],
		collectives[2][seguidoresRow],
		collectives[2][curtidasRow],
	];
	/* INSTAGRAM */
	const label = collectives[0][instagram.label];
	const labels = [
		collectives[1][tweetsRow], // Tweets
		collectives[1][seguindoRow], // Seguindo
		collectives[1][seguidoresRow], // Seguidores
		collectives[1][curtidasRow], // Curtidas
	];
	const config = {
		type: "pie", // "doughnut" 
		data: {
			datasets: [{
				data: data,
				backgroundColor: [
					instagram.blue,
					instagram.purpleViolet,
					instagram.orange,
					instagram.redOrange],
				label: instagram.label,

			}],
			labels: labels,
		},
		options: {
			responsive: true,
			legend: {position: "bottom"},
			cutoutPercentage: 25,
			title: {
				display: true,
				text: instagram.label,
			},
		},
	};
	await chartNode.drawChart(config);
	return chartNode.writeImageToFile("image/png", pathOfFile);
};

module.exports = {generateCharts, authenticate, fileName};

